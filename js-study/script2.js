// 関数（かんすう）とは、「いくつかの処理をまとめたもの」
// 「function()」と書き、その後ろの中括弧「{ }」の中にまとめたい処理を書くことで関数を用意することができる
// このように関数を用意することを「関数を定義する」と呼ぶ

// const 定数名 = function(){
//   まとめたい処理
// };

// 関数を定義しただけでは処理は実行されない
// 関数を定義した際に使用した定数名を用いて、「定数名()」と書くことで関数の中の処理を実行できる。このことを「関数を呼び出す」と言う。

const greet = function() {
  console.log("こんにちは！");
  console.log("関数を学習していきましょう！");
};

// 関数を呼び出す
greet();

// 関数を定数に代入することで、関数を定義している
// 「function()」の部分を「() =>」としても、これまでと同じように関数を定義することができる。「function」を用いるよりシンプルに書くことができる。
// この関数の書き方のことを、特別にアロー関数と呼ぶ
// 定数helloに関数を代入
const hello = ()=>{
  console.log("こんにちは！");
  console.log("私の名前は○○です");
}

// 定数helloに代入された関数を呼び出す
hello();

// 引数（ひきすう）とは関数に与える追加情報のようなもの。
// 関数を呼び出すときに一緒に値を渡すことで、関数の中でその値を利用することができる。
// 引数を受け取る関数を呼び出すには、「定数名(値)」と書く。関数は指定した値を受け取り、その値は引数に代入される。
// 関数の引数にnameを追加してください
const greeting = (name) => {
  // 「こんにちは、〇〇さん」となるように出力
  console.log(`こんにちは、${name}さん`);
};
// greetの引数に「jon」を渡して呼び出す
greeting("jon");


// 関数は引数を複数受け取ることもできる。()の中に受け取る引数をコンマ(,)で区切って並べることで、複数の引数を指定することができる。
// 引数は、左から順番に「第1引数、第2引数、...」と呼ぶ。
// 複数の引数に値を渡して関数を呼び出すには、定義するときと同じように、コンマ(,)を用いる。順番に注意する。
const add = (number1,number2) => {
  // number1とnumber2を足した値をコンソールに出力
  console.log(number1+number2);
};
// 引数に5と7を渡して関数を呼び出す
add(5,7);

// 呼び出し元で受け取る処理結果を戻り値（もどりち）と呼び、このことを「関数が戻り値を返す」と言う。
// 戻り値のある関数
// 関数の中でreturnを使うと、呼び出し元で値を受け取れるようになる。
// 「return 値」と書くことで、関数はその値を戻り値として返す。
// 関数の呼び出し部分を定数に代入することもできる
const half = (number) => {
  // numberを2で割った値を戻り値として返す
  return number / 2;
};
// 定数resultを定義
const result = half(130);
// 「130の半分は〇〇です」となるように出力
console.log(`130の半分は${result}です`);


// if文で使うような条件式をreturnすると、その条件式の結果として得られる真偽値（trueまたはfalse）を返すことができる
const check = (number) => {
  // numberが3の倍数かどうかを戻り値として返してください
  return number % 3 == 0;
};
// if文の条件式で、checkを呼び出してください
if (check(123)) {
  console.log("3の倍数です");
} else {
  console.log("3の倍数ではありません");
}

// 定数や変数の使用できる範囲のことをスコープと呼ぶ
// 関数の外側で定義した定数や変数は、プログラムのどこからでも使える
// 関数の{}内で定義した定数や変数は、その関数の内側でのみ使用できる。図のように、関数の内側で定義された定数を関数の外側で使用すると参照エラーになるので注意。

// toMinutes関数を定義してください
const toMinutes = (hour,minute) => {
  return hour*60 + minute;
}

// 定数resultsに、toMinutes関数の戻り値を代入
 const results = toMinutes(3,20);

// 「◯◯分」となるように、分に換算した結果を出力
console.log(`${results}分`);
